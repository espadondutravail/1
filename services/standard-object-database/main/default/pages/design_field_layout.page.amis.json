{
  "type": "page",
  "title": "Welcome to Steedos",
  "body": [
    {
      "type": "service",
      "body": [
        {
          "type": "service",
          "id": "service_field_design",
          "body": [
            {
              "type": "panel",
              "header": {
                "type": "flex",
                "id": "u:b2c8374e93fe",
                "items": [
                  {
                    "type": "tpl",
                    "tpl": "<p><h4><strong>设计字段布局</strong></h4> ${designObjectLabel}<span style=\"color: rgb(149, 165, 166);\">  ${designObjectName}</span></p>",
                    "id": "u:4c7bef616400"
                  },
                  {
                    "type": "flex",
                    "id": "u:1bfde03380f8",
                    "items": [
                      {
                        "type": "button",
                        "id": "u:ec9931ea883c",
                        "actionType": "dialog",
                        "dialog": {
                          "type": "dialog",
                          "title": "设置分组",
                          "size": "lg",
                          "body": [
                            {
                              "type": "form",
                              "mode": "normal",
                              "body": [
                                {
                                  "type": "steedos-input-table",
                                  "inlineEditMode": true,
                                  "fields": [
                                    {
                                      "name": "group_name",
                                      "label": "名称",
                                      "type": "text",
                                      "id": "u:31952daa443c"
                                    },
                                    {
                                      "name": "visible_on",
                                      "label": "显示条件",
                                      "type": "text",
                                      "id": "u:8d7551abcd28",
                                      "value": null
                                    },
                                    {
                                      "name": "collapsed",
                                      "label": "默认折叠",
                                      "type": "boolean"
                                    }
                                  ],
                                  "columns": [
                                    {
                                      "name": "group_name",
                                      "inlineEditMode": false
                                    },
                                    "visible_on",
                                    {
                                      "name": "collapsed",
                                      "width": 50
                                    }
                                  ],
                                  "name": "groups",
                                  "addable": true,
                                  "editable": true,
                                  "removable": true,
                                  "draggable": false,
                                  "showIndex": false,
                                  "id": "u:776ec89804c0",
                                  "label": ""
                                }
                              ]
                            }
                          ],
                          "onEvent": {
                            "confirm": {
                              "actions": [
                                {
                                  "actionType": "custom",
                                  "script": "//整理分组数据\nlet setting_groups = _.cloneDeep(event.data.groups);\nif (!_.find(setting_groups, { is_default: true })) {\n  setting_groups.unshift({\n    \"id\": \"未分组\",\n    \"group_name\": \"未分组\",\n    \"visible_on\": \"\",\n    \"is_default\": true\n  })\n}\nif (!_.find(setting_groups, { is_hidden: true })) {\n  setting_groups.push({\n    id: \"隐藏\",\n    group_name: \"隐藏\",\n    visible_on: \"\",\n    is_hidden: true\n  });\n}\nsetting_groups.forEach(function (group) {\n  if (group.is_hidden) {\n    group.group_name = \"隐藏\";\n    group.visible_on = \"\";\n  }\n  if (group.is_default) {\n    group.group_name = \"未分组\";\n    group.visible_on = \"\";\n  }\n  if (!group.id) {\n    group.id = group.group_name;\n  }\n  if (!group.visible_on) {\n    group.visible_on = \"\"\n  }\n})\n\n//整理字段与分组关系的数据\nlet fieldForGroup = {};\nlet oldGroup = _.cloneDeep(event.data.fieldForGroup);\nsetting_groups.forEach(function (group) {\n  if (_.has(oldGroup, group.id)) {\n    fieldForGroup[group.id] = oldGroup[group.id];\n    oldGroup = _.omit(oldGroup, group.id);\n  } else {\n    fieldForGroup[group.id] = [];\n  }\n})\nif (oldGroup && !_.isEmpty(oldGroup)) {\n  _.forEach(oldGroup, function (value, key) {\n    fieldForGroup[\"未分组\"] = _.unionBy(fieldForGroup[\"未分组\"], value);\n  });\n}\n\n//未分组 放在所有分组开头，隐藏 放在所有分组最后\nconst defaultGroup = fieldForGroup[\"未分组\"];\nconst hiddenGroup = fieldForGroup[\"隐藏\"];\ndelete fieldForGroup[\"未分组\"];\ndelete fieldForGroup[\"隐藏\"];\nfieldForGroup = _.merge({ \"未分组\": defaultGroup }, fieldForGroup, { \"隐藏\": hiddenGroup });\n\n//根据fieldForGroup调整groups顺序，设置分组与保存时需要groups按照顺序\nconst keys = _.keys(fieldForGroup);\nsetting_groups = _.sortBy(setting_groups, function (group) { return _.findIndex(keys, function (key) { return key == group.group_name }) });\n\ndoAction({\n  actionType: 'setValue',\n  componentId: 'service_field_design',\n  args: {\n    value: {\n      groups: setting_groups\n    }\n  }\n});\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"form_field_design\",\n  args: {\n    value: { design_field: fieldForGroup }\n  }\n});"
                                }
                              ]
                            }
                          },
                          "id": "u:e02c8f59216e",
                          "closeOnEsc": false,
                          "closeOnOutside": false,
                          "showCloseButton": true,
                          "showErrorMsg": true,
                          "showLoading": true
                        },
                        "label": "设置分组",
                        "className": ""
                      },
                      {
                        "type": "button",
                        "label": "新增字段",
                        "actionType": "dialog",
                        "id": "u:5857ae729799",
                        "visible": false,
                        "dialog": {
                          "type": "dialog",
                          "title": "新增字段",
                          "data": {
                            "appId": "${appId}",
                            "global": "${global}",
                            "context": "${context}",
                            "designObjectName": "${designObjectName}",
                            "_master": "${_master}"
                          },
                          "body": [
                            {
                              "type": "steedos-object-form",
                              "label": "对象表单",
                              "objectApiName": "object_fields",
                              "recordId": "",
                              "mode": "edit",
                              "defaultData": {
                                "object": "${designObjectName}"
                              },
                              "fieldsExtend": {
                                "object": {
                                  "amis": {
                                    "disabledOn": "true"
                                  }
                                },
                                "group": {
                                  "amis": {
                                    "hidden": true
                                  }
                                }
                              },
                              "fields": "",
                              "id": "u:b71796d3cb8c",
                              "className": "mb-4",
                              "enableTabs": true,
                              "tabsMode": "line"
                            }
                          ],
                          "showCloseButton": true,
                          "showErrorMsg": true,
                          "showLoading": true,
                          "closeOnEsc": false,
                          "dataMapSwitch": false,
                          "size": "lg",
                          "id": "u:066b3884bdd8"
                        }
                      },
                      {
                        "type": "button",
                        "label": "保存",
                        "actionType": "submit",
                        "id": "u:d9039421ea6b",
                        "target": "form_field_design",
                        "level": "primary"
                      }
                    ]
                  }
                ],
                "style": {
                  "position": "static",
                  "flexWrap": "nowrap",
                  "justifyContent": "space-between",
                  "alignItems": "baseline"
                },
                "isFixedHeight": false,
                "isFixedWidth": false
              },
              "body": [
                {
                  "type": "form",
                  "title": "",
                  "body": [
                    {
                      "type": "steedos-board",
                      "id": "steedos_field_deign",
                      "columns": 2,
                      "name": "design_field",
                      "boardSource": "${groups}",
                      "boardClassName": "bg-gray-50 p-2 ",
                      "header": {
                        "className": ""
                      },
                      "boardHeader": {
                        "type": "tpl",
                        "tpl": "${group_name}",
                        "id": "u:76d9a6c7d401"
                      },
                      "cardClassName": "p-1 bg-white border w-full rounded shadow",
                      "cardSchema": {
                        "type": "card",
                        "body": [
                          {
                            "type": "tpl",
                            "tpl": "<p><strong>${label}</strong> ${designObjectLabel}<span style=\"color: rgb(149, 165, 166);\">${_name}</span></p>",
                            "className": "w-4/5",
                            "inline": true
                          },
                          {
                            "type": "action",
                            "className": "w-4/5 mr-7",
                            "label": "",
                            "id": "steedos-field-edit-button",
                            "icon": "fa fa-pencil",
                            "level": "link",
                            "actionType": "dialog",
                            "dialog": {
                              "title": "编辑字段",
                              "body": [
                                {
                                  "type": "steedos-object-form",
                                  "label": "对象表单",
                                  "objectApiName": "object_fields",
                                  "recordId": "${_id}",
                                  "mode": "edit",
                                  "defaultData": {
                                    "object": "${designObjectName}"
                                  },
                                  "fields": [
                                    "label",
                                    "readonly",
                                    "is_wide",
                                    "visible_on"
                                  ],
                                  "fieldsExtend": {
                                    "label": {
                                      "is_wide": true,
                                      "group": ""
                                    },
                                    "readonly": {
                                      "group": ""
                                    },
                                    "is_wide": {
                                      "group": ""
                                    },
                                    "visible_on": {
                                      "group": ""
                                    }
                                  },
                                  "id": "u:b71796d3cb8c",
                                  "className": "mb-4",
                                  "apiRequestAdaptor": "api.data.query = api.data.query.replace('object_fields__update', 'object_fields__upsert')",
                                  "onEvent": {
                                    "submitSucc": {
                                      "weight": 0,
                                      "actions": [
                                        {
                                          "actionType": "custom",
                                          "script": "setTimeout(() => {\n  doAction({\n    \"actionType\": \"broadcast\",\n    \"args\": {\n      \"eventName\": \"@data.changed.object_fields\"\n    }\n  });\n}, 500);\n\n\n"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              "type": "dialog",
                              "data": {
                                "appId": "${appId}",
                                "global": "${global}",
                                "context": "${context}",
                                "designObjectName": "${designObjectName}",
                                "_master": "${_master}",
                                "_id": "${_id}"
                              },
                              "showCloseButton": true,
                              "showErrorMsg": true,
                              "showLoading": true,
                              "closeOnEsc": false,
                              "dataMapSwitch": false,
                              "size": "md",
                              "id": "u:066b3884bdd8"
                            },
                            "size": "xs"
                          }
                        ],
                        "bodyClassName": "h-7  flex justify-between items-center p-0 pl-10 my-2",
                        "toolbar": [],
                        "className": "mb-0 border-0 bg-none card",
                        "id": "u:296298da1bef"
                      },
                      "cardSource": "${fields}",
                      "vertical": true,
                      "onEvent": {
                        "change": {
                          "actions": [
                            {
                              "actionType": "custom",
                              "script": "const newGroups = _.keys(event.data.value);\nconst lastGroups = _.map(context.props.data.groups, 'group_name');\nif (newGroups != lastGroups) {\n  doAction({\n    actionType: 'setValue',\n    componentId: 'service_field_design',\n    args: {\n      value: {\n        fieldForGroup: event.data.value, groups: field_groups = _.sortBy(context.props.data.groups, function (group) { return _.findIndex(newGroups, function (group_name) { return group.group_name === group_name; }); })\n      }\n    }\n  });\n}\n"
                            }
                          ]
                        }
                      },
                      "value": "${fieldForGroup}"
                    }
                  ],
                  "id": "form_field_design",
                  "api": {
                    "url": "${context.rootUrl}/graphql",
                    "method": "post",
                    "dataType": "json",
                    "headers": {
                      "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                    },
                    "requestAdaptor": "var graphqlOrder = \"\";\n//先修改字段，使系统对象自行自定义\n//根据design_field,修改对象字段的sort_no与groups\nvar index = 1;\n_.forEach(api.data.design_field, function (items, key) {\n  let group = key;\n  if (key == \"未分组\" || key == \"隐藏\") {\n    group = null;\n  }\n  _.forEach(items, function (item) {\n    const field = _.find(api.data.fields, { 'id': item });\n    //如果是在隐藏分组里的字段，就给visible_on属性赋予{{false}};如果不在隐藏分组里，就判断来自数据库内的visible_on属性是不是{{false}},是就清除，不是就保持不变\n    const visible_on = key == \"隐藏\" ? \"{{false}}\" : (field.attr_visible_on == \"{{false}}\" ? \"{{true}}\" : field.attr_visible_on);\n    let docJson = {\n      sort_no: index * 10,\n      group, visible_on\n    }\n    if (field.id == field._id && field.is_system) {\n      docJson = {\n        object: api.data.$self.designObjectName,\n        type: field.type,\n        _name: field._name,\n        label: field.label,\n        sort_no: index * 10,\n        group,\n        visible_on,\n        is_system: field.is_system\n      }\n    }\n    if (key != \"隐藏\") {\n      docJson.hidden = false;\n    }\n    let itemOrder = 'upsert' + index + ':object_fields__upsert(id:\"' + item + '\" , doc:' + JSON.stringify(JSON.stringify(docJson)) + '){_id}\\n';\n    graphqlOrder += itemOrder;\n    index++;\n  })\n})\n\n//根据groups，修改对象的字段分组field_groups\nvar field_groups = _.cloneDeep(api.data.groups);\n_.remove(field_groups, { is_default: true });\n_.remove(field_groups, { is_hidden: true });\nfield_groups = field_groups.map(function (group) {\n  return _.omit(group, 'id');\n})\nconst keys = _.keys(api.data.design_field);\nfield_groups = _.sortBy(field_groups, function (group) { return _.findIndex(keys, function (key) { return key == group.group_name }) });\nconst groupOrder = 'upsert0:objects__upsert(id:\"' + api.data.$self.designObjectId + '\" , doc:' + JSON.stringify(JSON.stringify({ field_groups, name: api.data.$self.designObjectName })) + ') {_id}';\ngraphqlOrder += groupOrder;\n\n\ngraphqlOrder = 'mutation {' + graphqlOrder + '}';\nreturn {\n  ...api,\n  data: {\n    query: graphqlOrder\n  }\n}",
                    "adaptor": "if (payload.errors) {\n  payload.status = 2;\n  payload.msg = window.t ? window.t(payload.errors[\n    0\n  ].message) : payload.errors[\n    0\n  ].message;\n}\nreturn payload;",
                    "messages": {},
                    "data": {
                      "design_field": "${design_field}",
                      "groups": "${groups}",
                      "fields": "${fields}",
                      "$self": "$$"
                    }
                  },
                  "visibleOn": "${dataInitialed}",
                  "wrapWithPanel": false,
                  "name": "form_field_design",
                  "onEvent": {
                    "submitSucc": {
                      "weight": 0,
                      "actions": [
                        {
                          "actionType": "custom",
                          "script": "setTimeout(() => {\n  doAction({\n    \"actionType\": \"broadcast\",\n    \"args\": {\n      \"eventName\": \"@data.changed.object_fields\"\n    }\n  });\n}, 500);\n\n\n"
                        }
                      ]
                    }
                  }
                }
              ],
              "className": "Panel--default max-w-4xl m-auto",
              "id": "u:3a90104cb6b4"
            }
          ],
          "api": {
            "method": "post",
            "url": "${context.rootUrl}/graphql?designObjectId=${designObjectId}",
            "data": {
              "query": "{fields:object_fields(filters: [[\"object\",\"=\",\"${designObjectName}\"]],sort: \"sort_no asc\"){_id,label,_name,group,type,sort_no,modified,is_wide,is_system,hidden,visible_on,recordPermissions: _permissions{allowEdit}}}",
              "field_groups": "${field_groups}",
              "dataInitialed": "${dataInitialed}",
              "designObjectName": "${designObjectName}",
              "eventData": "${eventData}",
              "fieldForGroup": "${fieldForGroup}"
            },
            "headers": {
              "Authorization": "Bearer ${context.tenantId},${context.authToken}"
            },
            "messages": {},
            "requestAdaptor": "",
            "adaptor": "//筛选出可编辑的字段\r\nvar oldFields = _.filter(payload.data.fields, function (obj) { return obj.recordPermissions.allowEdit; });\r\n//将group为空的字段分为未分组的组中,将系统字段的_id改为对象名.字段名\r\noldFields = _.map(oldFields, function (obj) {\r\n  obj.originId = obj._id;\r\n  if (obj.hidden || obj.visible_on == \"{{false}}\") {\r\n    obj.group = \"隐藏\";\r\n  }else if (obj.group === null) {\r\n    obj.group = \"未分组\";\r\n  }\r\n  if (obj.is_system) {\r\n    obj._id = api.data.designObjectName + \".\" + obj._name;\r\n  }\r\n  return obj;\r\n});\r\n\r\n//整合出字段的属性集合\r\nconst fields = oldFields.map((field) => {\r\n  return {\r\n    \"id\": field._id,//用与steedos-board组件的关系分辨\r\n    \"_name\": field._name,\r\n    \"label\": field.label,\r\n    \"_id\": field.originId,//用于打开steedos-objectform\r\n    \"columnSpan\": field.is_wide ? 2 : 1,\r\n    \"is_system\": field.is_system,\r\n    \"type\": field.type,\r\n    \"attr_visible_on\": field.visible_on\r\n  }\r\n})\r\n\r\n//从字段的group属性中，整合出字段分组的属性集合\r\nlet field_groups = _.map(_.uniqBy(oldFields, \"group\"), function (obj) {\r\n  return {\r\n    \"id\": obj.group,\r\n    \"group_name\": obj.group,\r\n    \"visible_on\": \"\"\r\n  };\r\n});\r\n\r\n//合并对象上的field_groups与字段上的group\r\nlet groups = _.unionBy(api.data.field_groups, field_groups, 'id');\r\n\r\n//判断是否第一次调用接口，不是的话（说明是触发了datachange事件），返回fields与fieldUpdateData\r\nif (api.data.dataInitialed) {\r\n  const eventData = api.data.eventData;\r\n  let fieldUpdateData = \"\";\r\n  const fieldForGroup = api.data.fieldForGroup;\r\n  let fieldForGroupLength = 0;\r\n  _.forIn(fieldForGroup, function (value, key) {\r\n    fieldForGroupLength += value.length;\r\n  });\r\n  if (fieldForGroupLength < fields.length) {\r\n    fieldUpdateData = {\r\n      type: \"insert\",\r\n      id: eventData.result.data.recordId\r\n    }\r\n  } else if (fieldForGroupLength > fields.length) {\r\n    fieldUpdateData = {\r\n      type: \"delete\",\r\n      id: eventData._id\r\n    }\r\n  }\r\n  return payload = {\r\n    data: {\r\n      fields,\r\n      fieldUpdateData\r\n    }\r\n  }\r\n}\r\n\r\n//整合字段与分组的关系\r\nconst oldFieldsInGroups = _.groupBy(oldFields, \"group\");\r\nlet fieldForGroup = _.mapValues(_.groupBy(groups, \"id\"), function (group,key) {\r\n  if (oldFieldsInGroups[key]) {\r\n    return _.map(oldFieldsInGroups[key], function (obj) {\r\n      return obj._id;\r\n    });\r\n  } else {\r\n    return [];\r\n  }\r\n});\r\n\r\n//未分组 放在所有分组开头，隐藏 放在所有分组最后\r\nconst defaultGroup = fieldForGroup[\"未分组\"];\r\nconst hiddenGroup = fieldForGroup[\"隐藏\"];\r\ndelete fieldForGroup[\"未分组\"];\r\ndelete fieldForGroup[\"隐藏\"];\r\nfieldForGroup = _.merge({ \"未分组\": defaultGroup }, fieldForGroup, { \"隐藏\": hiddenGroup });\r\n\r\n//根据fieldForGroup调整groups顺序，设置分组与保存时需要groups按照顺序\r\nconst keys = _.keys(fieldForGroup);\r\ngroups = _.sortBy(groups, function (group) { return _.findIndex(keys, function (key) { return key == group.group_name }) });\r\n\r\nreturn payload = {\r\n  data: {\r\n    fields,\r\n    groups,\r\n    fieldForGroup,\r\n    dataInitialed: true\r\n  }\r\n};",
            "sendOn": "!!this.designObjectId"
          },
          "messages": {},
          "onEvent": {
            "fetchInited": {
              "actions": [
                {
                  "actionType": "custom",
                  "script": "\nconst fieldForGroup = context.props.data.fieldForGroup;\nconst fieldUpdateData = event.data.fieldUpdateData;\nif (fieldUpdateData && fieldUpdateData.type == \"delete\") {\n  _.forIn(fieldForGroup, function (group, group_name) {\n    _.remove(group, function (field) {\n      return field === fieldUpdateData.id;\n    })\n  });\n} else if (fieldUpdateData && fieldUpdateData.type == \"insert\") {\n  fieldForGroup[\"未分组\"].push(fieldUpdateData.id);\n}\n// doAction({\n//   actionType: 'setValue',\n//   componentId: \"service_field_design\",\n//   args: {\n//     value: { fieldForGroup }\n//   }\n// });\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"form_field_design\",\n  args: {\n    value: { design_field:fieldForGroup }\n  }\n});\n\n",
                  "expression": "${event.data.fieldUpdateData}"
                }
              ]
            }
          },
          "initFetch": false,
          "data": {
            "eventData": ""
          }
        }
      ],
      "id": "u:02f594329e1e",
      "api": {
        "method": "post",
        "url": "${context.rootUrl}/graphql",
        "data": {
          "query": "{objects(filters: [[\"name\",\"=\",\"${designObjectName}\"]]){_id,name,label,field_groups}}"
        },
        "headers": {
          "Authorization": "Bearer ${context.tenantId},${context.authToken}"
        },
        "messages": {},
        "requestAdaptor": "",
        "adaptor": "const field_groups = payload.data.objects[0] && _.map(payload.data.objects[0].field_groups, function (obj) {\n  return {\n    \"id\": obj.group_name,\n    \"group_name\": obj.group_name,\n    \"visible_on\": obj.visible_on,\n    \"collapsed\": obj.collapsed\n  }\n});\nfield_groups.unshift({\n  id: \"隐藏\",\n  group_name: \"隐藏\",\n  visible_on: \"\",\n  is_hidden: true\n});\nfield_groups.unshift({\n  id: \"未分组\",\n  group_name: \"未分组\",\n  visible_on: \"\",\n  is_default: true\n});\n\n\n\nconst designObjectId = payload.data.objects[0] && payload.data.objects[0]._id;\nreturn payload = {\n  data: {\n    field_groups,\n    designObjectId,\n designObjectLabel: payload.data.objects[0] && payload.data.objects[0].label,\n   _master: {\n      recordId: designObjectId\n    }\n  }\n}"
      },
      "messages": {},
      "onEvent": {
        "@data.changed.object_fields": {
          "actions": [
            {
              "actionType": "reload",
              "data": {
                "eventData": "${event.data}"
              },
              "componentId": "service_field_design"
            }
          ]
        }
      }
    }
  ],
  "regions": [
    "body"
  ],
  "data": {
    "initialValues": {},
    "appId": "builder",
    "title": "",
    "context": "${context}",
    "dataInitialed": false
  },
  "id": "u:993ee4316643",
  "css": {
    ".antd-TplField p": {
      "margin": "0.625rem 0.625rem"
    }
  },
  "className": "steedos-design-field",
  "asideResizor": false,
  "pullRefresh": {
    "disabled": true
  }
}